import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, DefaultBotProperties
from aiogram.filters import Command
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    from utils import get_binance_futures, get_bybit_futures, get_binance_open_interest, generate_tradingview_link, generate_coinglass_link
    from database import init_db, save_settings, get_settings
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DefaultBotProperties
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–æ–º!\n–ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@dp.message(Command(commands=["settings"]))
async def cmd_settings(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settings <volume_threshold> <oi_threshold>\n–ü—Ä–∏–º–µ—Ä: /settings 50 5")
        return
    try:
        volume_threshold = float(args[1])
        oi_threshold = float(args[2])
        save_settings(message.chat.id, {"volume_threshold": volume_threshold, "oi_threshold": oi_threshold})
        await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –æ–±—ä–µ–º {volume_threshold}%, OI {oi_threshold}%")
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤.")

async def send_crypto_alert(chat_id, symbol, price, volume_change, oi_change):
    tradingview_link = generate_tradingview_link(symbol)
    coinglass_link = generate_coinglass_link(symbol)

    text = (
        f"üöÄ <b>{symbol}</b>\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {price}$\n"
        f"üìà <b>–†–æ—Å—Ç –æ–±—ä–µ–º–∞:</b> +{volume_change}%\n"
        f"üìä <b>–†–æ—Å—Ç OI:</b> +{oi_change}%\n\n"
        f"üîó <a href='{tradingview_link}'>TradingView</a> | <a href='{coinglass_link}'>Coinglass</a>"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìä TradingView", url=tradingview_link),
            types.InlineKeyboardButton(text="üìà Coinglass", url=coinglass_link),
        ]
    ])

    try:
        await bot.send_message(chat_id, text=text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def main_loop():
    init_db()
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance
            binance_data = await get_binance_futures()
            if not binance_data:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance")
                await asyncio.sleep(300)
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn = sqlite3.connect('settings.db')
            cursor = conn.cursor()
            cursor.execute('SELECT chat_id FROM user_settings')
            chat_ids = [row[0] for row in cursor.fetchall()]
            conn.close()

            for chat_id in chat_ids:
                settings = get_settings(chat_id)
                volume_threshold = settings.get("volume_threshold", 50)
                oi_threshold = settings.get("oi_threshold", 5)

                for item in binance_data:
                    symbol = item.get("symbol", "")
                    if not symbol.endswith("USDT"):
                        continue

                    volume_change = float(item.get("volume", 0))
                    price = float(item.get("lastPrice", 0))
                    oi_change = await get_binance_open_interest(symbol)

                    if volume_change >= volume_threshold and oi_change >= oi_threshold:
                        await send_crypto_alert(chat_id, symbol, price, volume_change, oi_change)

            await asyncio.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ main_loop: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º main_loop –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(main_loop())
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
